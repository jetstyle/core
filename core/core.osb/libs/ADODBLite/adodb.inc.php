<?php    if (!defined('_ADODB_LAYER')) { define('_ADODB_LAYER',1);    define('ADODB_BAD_RS','<p>Bad $rs in %s. Connection or SQL invalid. Try using $connection->debug=true;</p>'); define('ADODB_FETCH_DEFAULT',0); define('ADODB_FETCH_NUM',1); define('ADODB_FETCH_ASSOC',2); define('ADODB_FETCH_BOTH',3);  if (!defined('ADODB_ASSOC_CASE')) define('ADODB_ASSOC_CASE',2);  define('ADODB_TABLE_REGEX','([]0-9a-z_\`\.\@\[-]*)'); if (!defined('ADODB_PREFETCH_ROWS')) define('ADODB_PREFETCH_ROWS',10);  if (!defined('ADODB_DIR')) define('ADODB_DIR',dirname(__FILE__)); define('TIMESTAMP_FIRST_YEAR',100);    GLOBAL $ADODB_vers,  $ADODB_Database,  $ADODB_COUNTRECS,  $ADODB_CACHE_DIR,  $ADODB_EXTENSION,  $ADODB_COMPAT_PATCH,  $ADODB_FETCH_MODE;     if (strnatcmp(PHP_VERSION,'4.3.0')>=0) { define('ADODB_PHPVER',0x4300); } else if (strnatcmp(PHP_VERSION,'4.2.0')>=0) { define('ADODB_PHPVER',0x4200); } else if (strnatcmp(PHP_VERSION,'4.0.5')>=0) { define('ADODB_PHPVER',0x4050); } else { define('ADODB_PHPVER',0x4000); } $ADODB_EXTENSION = (defined('ADODB_EXTENSION'));   function ADODB_str_replace($src, $dest, $data) { if (ADODB_PHPVER >= 0x4050) return str_replace($src,$dest,$data); $s = reset($src); $d = reset($dest); while ($s !== false) { $data = str_replace($s,$d,$data); $s = next($src); $d = next($dest); } return $data; } function ADODB_Setup() { GLOBAL $ADODB_vers,  $ADODB_Database,  $ADODB_COUNTRECS,  $ADODB_CACHE_DIR,  $ADODB_FETCH_MODE; $ADODB_FETCH_MODE = ADODB_FETCH_DEFAULT; if (!isset($ADODB_CACHE_DIR)) { $ADODB_CACHE_DIR = '/tmp'; } else {  if (strpos($ADODB_CACHE_DIR,'://') !== false) die("Illegal path http:// or ftp://"); }  srand(((double)microtime())*1000000);  $ADODB_Database = '';  $ADODB_vers = 'V3.31 17 March 2003 (c) 2000-2003 John Lim (jlim@natsoft.com.my). All rights reserved. Released BSD & LGPL.';  $ADODB_COUNTRECS = false; }    ADODB_Setup();     class ADOFieldObject { var $name = ''; var $max_length=0; var $type="";  var $not_null = false;   var $has_default = false;   var $default_value;  }     class ADO_DBX { var $handle; var $database; var $module; };  class ADOConnection {    var $dataProvider = 'native'; var $databaseType = '';  var $database = '';  var $host = '';  var $user = '';  var $password = '';  var $debug = false;  var $maxblobsize = 256000;  var $concat_operator = '+';  var $fmtDate = "'Y-m-d'";  var $fmtTimeStamp = "'Y-m-d, h:i:s A'";  var $true = '1';  var $false = '0';  var $replaceQuote = "\\'";  var $charSet=false;  var $metaTablesSQL = '';  var $hasInsertID = false;  var $hasAffectedRows = false;  var $hasTop = false;  var $hasLimit = false;  var $readOnly = false;  var $hasMoveFirst = false;  var $hasGenID = false;  var $hasTransactions = true;   var $genID = 0;  var $raiseErrorFn = false;  var $upperCase = false;  var $isoDates = false;  var $cacheSecs = 3600;  var $sysDate = false;  var $sysTimeStamp = false;  var $arrayClass = 'ADORecordSet_array';  var $noNullStrings = false;  var $numCacheHits = 0; var $numCacheMisses = 0; var $pageExecuteCountRows = true; var $uniqueSort = false;  var $leftOuter = false;  var $rightOuter = false;  var $ansiOuter = false;  var $autoRollback = false;  var $poorAffectedRows = false;  var $fnExecute = false; var $fnCacheExecute = false; var $blobEncodeType = false;  var $dbxDriver = false;    var $_connectionID = false;  var $_errorMsg = '';   var $_queryID = false;  var $_isPersistentConnection = false;  var $_bindInputArray = false;  var $autoCommit = true;  var $transOff = false;  var $transCnt = 0;  var $fetchMode=false;  function ADOConnection() { die('Virtual Class -- cannot instantiate'); }  function ServerInfo() { return array('description' => '', 'version' => ''); } function _findvers($str) { if (preg_match('/([0-9]+\.([0-9\.])+)/',$str, $arr)) return $arr[1]; else return ''; }  function outp($msg,$newline=true) { global $HTTP_SERVER_VARS; if (defined('ADODB_OUTP')) { $fn = ADODB_OUTP; $fn($msg,$newline); return; } if ($newline) $msg .= "<br>\n"; if (isset($HTTP_SERVER_VARS['HTTP_USER_AGENT'])) echo $msg; else echo strip_tags($msg); flush(); }  function Connect($argHostname = "", $argUsername = "", $argPassword = "", $argDatabaseName = "", $forceNew = false) { if ($argHostname != "") $this->host = $argHostname; if ($argUsername != "") $this->user = $argUsername; if ($argPassword != "") $this->password = $argPassword;  if ($argDatabaseName != "") $this->database = $argDatabaseName; $this->_isPersistentConnection = false; if ($fn = $this->raiseErrorFn) { if ($forceNew) { if ($this->_nconnect($this->host, $this->user, $this->password, $this->database)) return true; } else { if ($this->_connect($this->host, $this->user, $this->password, $this->database)) return true; } $err = $this->ErrorMsg(); if (empty($err)) $err = "Connection error to server '$argHostname' with user '$argUsername'"; $fn($this->databaseType,'CONNECT',$this->ErrorNo(),$err,$this->host,$this->database); } else { if ($forceNew) { if ($this->_nconnect($this->host, $this->user, $this->password, $this->database)) return true; } else { if ($this->_connect($this->host, $this->user, $this->password, $this->database)) return true; } } if ($this->debug) ADOConnection::outp( $this->host.': '.$this->ErrorMsg()); return false; } function _nconnect($argHostname, $argUsername, $argPassword, $argDatabaseName) { return $this->_connect($argHostname, $argUsername, $argPassword, $argDatabaseName); }  function SQLDate($fmt, $col=false) { if (!$col) $col = $this->sysDate; return $col;  }  function Prepare($sql) { return $sql; }  function PrepareSP($sql) { return $this->Prepare($sql); }  function Quote($s) { return $this->qstr($s,false); }  function ErrorNative() { return $this->ErrorNo(); }  function nextId($seq_name) { return $this->GenID($seq_name); }  function RowLock($table,$where) { return false; } function CommitLock($table) { return $this->CommitTrans(); } function RollbackLock($table) { return $this->RollbackTrans(); }  function &Query($sql, $inputarr=false) { $rs = &$this->Execute($sql, $inputarr); if (!$rs && defined('ADODB_PEAR')) return ADODB_PEAR_Error(); return $rs; }  function Disconnect() { return $this->Close(); }  function &Execute($sql,$inputarr=false,$arg3=false) { if ($this->fnExecute) { $fn = $this->fnExecute; $fn($this,$sql,$inputarr); } if (!$this->_bindInputArray && $inputarr) { $sqlarr = explode('?',$sql); $sql = ''; $i = 0; foreach($inputarr as $v) { $sql .= $sqlarr[$i];   if (gettype($v) == 'string') $sql .= $this->qstr($v); else if ($v === null) $sql .= 'NULL'; else $sql .= $v; $i += 1; } $sql .= $sqlarr[$i]; if ($i+1 != sizeof($sqlarr)) ADOConnection::outp( "Input Array does not match ?: ".htmlspecialchars($sql)); $inputarr = false; }  if ($this->debug) { global $HTTP_SERVER_VARS; $ss = ''; if ($inputarr) { foreach ($inputarr as $kk => $vv) { if (is_string($vv) && strlen($vv)>64) $vv = substr($vv,0,64).'...'; $ss .= "($kk=>'$vv') "; } $ss = "[ $ss ]"; } if (is_array($sql)) $sqlTxt = $sql[0]; else $sqlTxt = $sql;  $inBrowser = isset($HTTP_SERVER_VARS['HTTP_USER_AGENT']); if ($inBrowser) ADOConnection::outp( "<hr />\n($this->databaseType): ".htmlspecialchars($sqlTxt)." &nbsp; <code>$ss</code>\n<hr />\n",false); else ADOConnection::outp( "=----\n($this->databaseType): ".($sqlTxt)." \n-----\n",false); flush(); $this->_queryID = $this->_query($sql,$inputarr,$arg3);  if ($this->databaseType == 'mssql') {   if($emsg = $this->ErrorMsg()) { $err = $this->ErrorNo(); if ($err) { ADOConnection::outp($err.': '.$emsg); flush(); } } } else if (!$this->_queryID) { ADOConnection::outp( $this->ErrorNo().': '.$this->ErrorMsg() ); flush(); } } else {  $this->_queryID =@$this->_query($sql,$inputarr,$arg3); }  if ($this->_queryID === false) { $fn = $this->raiseErrorFn; if ($fn) { $fn($this->databaseType,'EXECUTE',$this->ErrorNo(),$this->ErrorMsg(),$sql,$inputarr); } return false; } else if ($this->_queryID === true) {  $rs = new ADORecordSet_empty(); return $rs; }  $rsclass = "ADORecordSet_".$this->databaseType; $rs = new $rsclass($this->_queryID,$this->fetchMode);  $rs->connection = &$this;  $rs->Init(); if (is_array($sql)) $rs->sql = $sql[0]; else $rs->sql = $sql; return $rs; }  function GenID($seqname='adodbseq',$startID=1) { if (!$this->hasGenID) { return 0;  } $getnext = sprintf($this->_genIDSQL,$seqname); $rs = @$this->Execute($getnext); if (!$rs) { $createseq = $this->Execute(sprintf($this->_genSeqSQL,$seqname,$startID)); $rs = $this->Execute($getnext); } if ($rs && !$rs->EOF) $this->genID = reset($rs->fields); else $this->genID = 0;  if ($rs) $rs->Close(); return $this->genID; }  function Insert_ID() { if ($this->hasInsertID) return $this->_insertid(); if ($this->debug) ADOConnection::outp( '<p>Insert_ID error</p>'); return false; }  function Affected_Rows() { if ($this->hasAffectedRows) { $val = $this->_affectedrows(); return ($val < 0) ? false : $val; } if ($this->debug) ADOConnection::outp( '<p>Affected_Rows error</p>',false); return false; }  function ErrorMsg() { return '!! '.strtoupper($this->dataProvider.' '.$this->databaseType).': '.$this->_errorMsg; }  function ErrorNo() { return ($this->_errorMsg) ? -1 : 0; }  function SelectDB($dbName) {return false;}  function &SelectLimit($sql,$nrows=-1,$offset=-1, $inputarr=false,$arg3=false,$secs2cache=0) { if ($this->hasTop && $nrows > 0) {   $ismssql = (strpos($this->databaseType,'mssql') !== false); if ($ismssql) $isaccess = false; else $isaccess = (strpos($this->databaseType,'access') !== false); if ($offset <= 0) {  if ($isaccess) { $sql = preg_replace( '/(^\s*select\s+(distinctrow|distinct)?)/i','\\1 '.$this->hasTop.' '.$nrows.' ',$sql); if ($secs2cache>0) return $this->CacheExecute($secs2cache, $sql,$inputarr,$arg3); else return $this->Execute($sql,$inputarr,$arg3); } else if ($ismssql){ $sql = preg_replace( '/(^\s*select\s+(distinctrow|distinct)?)/i','\\1 '.$this->hasTop.' '.$nrows.' ',$sql); } else { $sql = preg_replace( '/(^\s*select\s)/i','\\1 '.$this->hasTop.' '.$nrows.' ',$sql); } } else { $nn = $nrows + $offset; if ($isaccess || $ismssql) { $sql = preg_replace( '/(^\s*select\s+(distinctrow|distinct)?)/i','\\1 '.$this->hasTop.' '.$nn.' ',$sql); } else { $sql = preg_replace( '/(^\s*select\s)/i','\\1 '.$this->hasTop.' '.$nn.' ',$sql); } } }   global $ADODB_COUNTRECS; $savec = $ADODB_COUNTRECS; $ADODB_COUNTRECS = false; if ($offset>0){ if ($secs2cache>0) $rs = &$this->CacheExecute($secs2cache,$sql,$inputarr,$arg3); else $rs = &$this->Execute($sql,$inputarr,$arg3); } else { if ($secs2cache>0) $rs = &$this->CacheExecute($secs2cache,$sql,$inputarr,$arg3); else $rs = &$this->Execute($sql,$inputarr,$arg3); } return $rs; }  function GetOne($sql,$inputarr=false) { $ret = false; $rs = &$this->Execute($sql,$inputarr); if ($rs) { if (!$rs->EOF) $ret = reset($rs->fields); $rs->Close(); } return $ret; } function CacheGetOne($secs2cache,$sql=false,$inputarr=false) { $ret = false; $rs = &$this->CacheExecute($secs2cache,$sql,$inputarr); if ($rs) { if (!$rs->EOF) $ret = reset($rs->fields); $rs->Close(); } return $ret; } function GetCol($sql, $inputarr = false, $trim = false) { $rv = false; $rs = &$this->Execute($sql, $inputarr); if ($rs) { if ($trim) { while (!$rs->EOF) { $rv[] = trim(reset($rs->fields)); $rs->MoveNext(); } } else { while (!$rs->EOF) { $rv[] = reset($rs->fields); $rs->MoveNext(); } } $rs->Close(); } return $rv; } function CacheGetCol($secs, $sql, $inputarr = false,$trim=false) { $rv = false; $rs = &$this->CacheExecute($secs, $sql, $inputarr); if ($rs) { if ($trim) { while (!$rs->EOF) { $rv[] = trim(reset($rs->fields)); $rs->MoveNext(); } } else { while (!$rs->EOF) { $rv[] = reset($rs->fields); $rs->MoveNext(); } } $rs->Close(); } return $rv; }  function OffsetDate($dayFraction,$date=false) { if (!$date) $date = $this->sysDate; return '('.$date.'+'.$dayFraction.')'; }  function GetAll($sql,$inputarr=false) { $rs = $this->Execute($sql,$inputarr); if (!$rs) if (defined('ADODB_PEAR')) return ADODB_PEAR_Error(); else return false; $arr = $rs->GetArray(); $rs->Close(); return $arr; } function CacheGetAll($secs2cache,$sql=false,$inputarr=false) { $rs = $this->CacheExecute($secs2cache,$sql,$inputarr); if (!$rs) if (defined('ADODB_PEAR')) return ADODB_PEAR_Error(); else return false; $arr = $rs->GetArray(); $rs->Close(); return $arr; }  function GetRow($sql,$inputarr=false) { $rs = $this->Execute($sql,$inputarr); if ($rs) { $arr = false; if (!$rs->EOF) $arr = $rs->fields; $rs->Close(); return $arr; } return false; } function CacheGetRow($secs2cache,$sql=false,$inputarr=false) { $rs = $this->CacheExecute($secs2cache,$sql,$inputarr); if ($rs) { $arr = false; if (!$rs->EOF) $arr = $rs->fields; $rs->Close(); return $arr; } return false; }  function Replace($table, $fieldArray, $keyCol, $autoQuote=false, $has_autoinc=false) { if (count($fieldArray) == 0) return 0; $first = true; $uSet = ''; if (!is_array($keyCol)) { $keyCol = array($keyCol); } foreach($fieldArray as $k => $v) { if ($autoQuote && !is_numeric($v) and $v[0] != "'" and strcasecmp($v,'null')!=0) { $v = $this->qstr($v); $fieldArray[$k] = $v; } if (in_array($k,$keyCol)) continue;  if ($first) { $first = false; $uSet = "$k=$v"; } else $uSet .= ",$k=$v"; } $first = true; foreach ($keyCol as $v) { if ($first) { $first = false; $where = "$v=$fieldArray[$v]"; } else { $where .= " and $v=$fieldArray[$v]"; } } if ($uSet) { $update = "UPDATE $table SET $uSet WHERE $where"; $rs = $this->Execute($update); if ($rs) { if ($this->poorAffectedRows) {  if ($this->ErrorNo()<>0) return 0;   $cnt = $this->GetOne("select count(*) from $table where $where"); if ($cnt > 0) return 1;  } else if (($this->Affected_Rows()>0)) return 1; } }  $first = true; foreach($fieldArray as $k => $v) { if ($has_autoinc && in_array($k,$keyCol)) continue;  if ($first) { $first = false; $iCols = "$k"; $iVals = "$v"; } else { $iCols .= ",$k"; $iVals .= ",$v"; } } $insert = "INSERT INTO $table ($iCols) VALUES ($iVals)"; $rs = $this->Execute($insert); return ($rs) ? 2 : 0; }  function &CacheSelectLimit($secs2cache,$sql,$nrows=-1,$offset=-1,$inputarr=false, $arg3=false) { if (!is_numeric($secs2cache)) { if ($sql === false) $sql = -1; if ($offset == -1) $offset = false;  return $this->SelectLimit($secs2cache,$sql,$nrows,$offset,$inputarr,$this->cacheSecs); } else { if ($sql === false) ADOConnection::outp( "Warning: \$sql missing from CacheSelectLimit()"); return $this->SelectLimit($sql,$nrows,$offset,$inputarr,$arg3,$secs2cache); } }  function CacheFlush($sql=false,$inputarr=false) { global $ADODB_CACHE_DIR; if (strlen($ADODB_CACHE_DIR) > 1 && !$sql) { if (strpos(strtoupper(PHP_OS),'WIN') !== false) { $cmd = 'del /s '.str_replace('/','\\',$ADODB_CACHE_DIR).'\adodb_*.cache'; } else { $cmd = 'rm -rf '.$ADODB_CACHE_DIR.'/??/adodb_*.cache';  } if ($this->debug) { ADOConnection::outp( "CacheFlush: $cmd<br><pre>\n", system($cmd),"</pre>"); } else { exec($cmd); } return; } $f = $this->_gencachename($sql.serialize($inputarr),false); adodb_write_file($f,'');  @unlink($f); }  function _gencachename($sql,$createdir) { global $ADODB_CACHE_DIR; $m = md5($sql.$this->databaseType.$this->database.$this->user); $dir = $ADODB_CACHE_DIR.'/'.substr($m,0,2); if ($createdir && !file_exists($dir)) { $oldu = umask(0); if (!mkdir($dir,0771)) if ($this->debug) ADOConnection::outp( "Unable to mkdir $dir for $sql"); umask($oldu); } return $dir.'/adodb_'.$m.'.cache'; }  function UpdateBlob($table,$column,$val,$where,$blobtype='BLOB') { return $this->Execute("UPDATE $table SET $column=? WHERE $where",array($val)) != false; }  function UpdateBlobFile($table,$column,$path,$where,$blobtype='BLOB') { $fd = fopen($path,'rb'); if ($fd === false) return false; $val = fread($fd,filesize($path)); fclose($fd); return $this->UpdateBlob($table,$column,$val,$where,$blobtype); } function BlobDecode($blob) { return $blob; } function BlobEncode($blob) { return $blob; }  function UpdateClob($table,$column,$val,$where) { return $this->UpdateBlob($table,$column,$val,$where,'CLOB'); }  function CharMax() { return 255;  }  function TextMax() { return 4000;  }  function Close() { return $this->_close();     }  function BeginTrans() {return false;}  function CommitTrans($ok=true) { return true;}  function RollbackTrans() { return false;}  function MetaDatabases() {return false;}  function MetaTables() { global $ADODB_FETCH_MODE; if ($this->metaTablesSQL) {  $save = $ADODB_FETCH_MODE; $ADODB_FETCH_MODE = ADODB_FETCH_NUM; if ($this->fetchMode !== false) $savem = $this->SetFetchMode(false); $rs = $this->Execute($this->metaTablesSQL); if (isset($savem)) $this->SetFetchMode($savem); $ADODB_FETCH_MODE = $save; if ($rs === false) return false; $arr = $rs->GetArray(); $arr2 = array(); for ($i=0; $i < sizeof($arr); $i++) { $arr2[] = $arr[$i][0]; } $rs->Close(); return $arr2; } return false; }  function DBDate($d) { if (empty($d) && $d !== 0) return 'null'; if (is_string($d) && !is_numeric($d)) if ($this->isoDates) return "'$d'"; else $d = ADOConnection::UnixDate($d); return adodb_date($this->fmtDate,$d); }  function DBTimeStamp($ts) { if (empty($ts) && $ts !== 0) return 'null'; if (is_string($ts) && !is_numeric($ts)) if ($this->isoDates) return "'$ts'"; else $ts = ADOConnection::UnixTimeStamp($ts); return adodb_date($this->fmtTimeStamp,$ts); }  function UnixDate($v) { if (!preg_match( "|^([0-9]{4})[-/\.]?([0-9]{1,2})[-/\.]?([0-9]{1,2})|", ($v), $rr)) return false; if ($rr[1] <= TIMESTAMP_FIRST_YEAR) return 0;  return @adodb_mktime(0,0,0,$rr[2],$rr[3],$rr[1]); }  function UnixTimeStamp($v) { if (!preg_match( "|^([0-9]{4})[-/\.]?([0-9]{1,2})[-/\.]?([0-9]{1,2})[ -]?(([0-9]{1,2}):?([0-9]{1,2}):?([0-9\.]{1,4}))?|", ($v), $rr)) return false; if ($rr[1] <= TIMESTAMP_FIRST_YEAR && $rr[2]<= 1) return 0;  if (!isset($rr[5])) return adodb_mktime(0,0,0,$rr[2],$rr[3],$rr[1]); return @adodb_mktime($rr[5],$rr[6],$rr[7],$rr[2],$rr[3],$rr[1]); }  function UserDate($v,$fmt='Y-m-d') { $tt = $this->UnixDate($v);  if (($tt === false || $tt == -1) && $v != false) return $v; else if ($tt == 0) return $this->emptyDate; else if ($tt == -1) {  } return adodb_date($fmt,$tt); }  function qstr($s,$magic_quotes=false) { if (!$magic_quotes) { if ($this->replaceQuote[0] == '\\'){  $s = adodb_str_replace(array('\\',"\0"),array('\\\\',"\\\0"),$s);  } return "'".str_replace("'",$this->replaceQuote,$s)."'"; }  $s = str_replace('\\"','"',$s); if ($this->replaceQuote == "\\'")  return "'$s'"; else { $s = str_replace('\\\\','\\',$s); return "'".str_replace("\\'",$this->replaceQuote,$s)."'"; } } }      class ADOFetchObj { };     class ADORecordSet_empty { var $dataProvider = 'empty'; var $EOF = true; var $_numOfRows = 0; var $fields = false; var $connection = false; function RowCount() {return 0;} function RecordCount() {return 0;} function PO_RecordCount(){return 0;} function Close(){return true;} function FetchRow() {return false;} function FieldCount(){ return 0;} }      define('ADODB_DATE_VERSION',0.08);  if (!defined('ADODB_ALLOW_NEGATIVE_TS')) define('ADODB_NO_NEGATIVE_TS',1); function adodb_date_test_date($y1,$m) {  $t = adodb_mktime(0,0,0,$m,13,$y1); if ("$y1-$m-13 00:00:00" != adodb_date('Y-n-d H:i:s',$t)) { print "<b>$y1 error</b><br>"; return false; } return true; }  function adodb_date_test() { error_reporting(E_ALL); print "<h4>Testing adodb_date and adodb_mktime. version=".ADODB_DATE_VERSION. "</h4>"; set_time_limit(0); $fail = false;  if (!defined('ADODB_TEST_DATES')) define('ADODB_TEST_DATES',1); print "<p>Testing gregorian <=> julian conversion<p>"; $t = adodb_mktime(0,0,0,10,11,1492);  if (!(adodb_date('D Y-m-d',$t) == 'Fri 1492-10-11')) print 'Error in Columbus landing<br>'; $t = adodb_mktime(0,0,0,2,29,1500); if (!(adodb_date('Y-m-d',$t) == '1500-02-29')) print 'Error in julian leap years<br>'; $t = adodb_mktime(0,0,0,2,29,1700); if (!(adodb_date('Y-m-d',$t) == '1700-03-01')) print 'Error in gregorian leap years<br>'; print adodb_mktime(0,0,0,10,4,1582).' '; print adodb_mktime(0,0,0,10,15,1582); $diff = (adodb_mktime(0,0,0,10,15,1582) - adodb_mktime(0,0,0,10,4,1582)); if ($diff != 3600*24) print " <b>Error in gregorian correction = ".($diff/3600/24)." days </b><br>"; print " 15 Oct 1582, Fri=".(adodb_dow(1582,10,15) == 5 ? 'Fri' : '<b>Error</b>')."<br>"; print " 4 Oct 1582, Thu=".(adodb_dow(1582,10,4) == 4 ? 'Thu' : '<b>Error</b>')."<br>"; print "<p>Testing overflow<p>"; $t = adodb_mktime(0,0,0,3,33,1965); if (!(adodb_date('Y-m-d',$t) == '1965-04-02')) print 'Error in day overflow 1 <br>'; $t = adodb_mktime(0,0,0,4,33,1971); if (!(adodb_date('Y-m-d',$t) == '1971-05-03')) print 'Error in day overflow 2 <br>'; $t = adodb_mktime(0,0,0,1,60,1965); if (!(adodb_date('Y-m-d',$t) == '1965-03-01')) print 'Error in day overflow 3 '.adodb_date('Y-m-d',$t).' <br>'; $t = adodb_mktime(0,0,0,12,32,1965); if (!(adodb_date('Y-m-d',$t) == '1966-01-01')) print 'Error in day overflow 4 '.adodb_date('Y-m-d',$t).' <br>'; $t = adodb_mktime(0,0,0,12,63,1965); if (!(adodb_date('Y-m-d',$t) == '1966-02-01')) print 'Error in day overflow 5 '.adodb_date('Y-m-d',$t).' <br>'; $t = adodb_mktime(0,0,0,13,3,1965); if (!(adodb_date('Y-m-d',$t) == '1966-01-03')) print 'Error in mth overflow 1 <br>'; print "Testing 2-digit => 4-digit year conversion<p>"; if (adodb_year_digit_check(00) != 2000) print "Err 2-digit 2000<br>"; if (adodb_year_digit_check(10) != 2010) print "Err 2-digit 2010<br>"; if (adodb_year_digit_check(20) != 2020) print "Err 2-digit 2020<br>"; if (adodb_year_digit_check(30) != 2030) print "Err 2-digit 2030<br>"; if (adodb_year_digit_check(40) != 1940) print "Err 2-digit 1940<br>"; if (adodb_year_digit_check(50) != 1950) print "Err 2-digit 1950<br>"; if (adodb_year_digit_check(90) != 1990) print "Err 2-digit 1990<br>";  print "<p>Testing date formating</p>"; $fmt = '\d\a\t\e T Y-m-d H:i:s a A d D F g G h H i j l L m M n O r s t U w y Y z Z 2003'; $s1 = date($fmt,0); $s2 = adodb_date($fmt,0); if ($s1 != $s2) { print " date() 0 failed<br>$s1<br>$s2<br>"; } flush(); for ($i=100; --$i > 0; ) { $ts = 3600.0*((rand()%60000)+(rand()%60000))+(rand()%60000); $s1 = date($fmt,$ts); $s2 = adodb_date($fmt,$ts);  $pos = strcmp($s1,$s2); if (($s1) != ($s2)) { for ($j=0,$k=strlen($s1); $j < $k; $j++) { if ($s1[$j] != $s2[$j]) { print substr($s1,$j).' '; break; } } print "<b>Error date(): $ts<br><pre> 
&nbsp; \"$s1\" (date len=".strlen($s1).")
&nbsp; \"$s2\" (adodb_date len=".strlen($s2).")</b></pre><br>"; $fail = true; } $a1 = getdate($ts); $a2 = adodb_getdate($ts); $rez = array_diff($a1,$a2); if (sizeof($rez)>0) { print "<b>Error getdate() $ts</b><br>"; print_r($a1); print "<br>"; print_r($a2); print "<p>"; $fail = true; } }  print "<p>Testing random dates between 100 and 4000</p>"; adodb_date_test_date(100,1); for ($i=100; --$i >= 0;) { $y1 = 100+rand(0,1970-100); $m = rand(1,12); adodb_date_test_date($y1,$m); $y1 = 3000-rand(0,3000-1970); adodb_date_test_date($y1,$m); } print '<p>'; $start = 1960+rand(0,10); $yrs = 12; $i = 365.25*86400*($start-1970); $offset = 36000+rand(10000,60000); $max = 365*$yrs*86400; $lastyear = 0;   print "Testing $start to ".($start+$yrs).", or $max seconds, offset=$offset: "; for ($max += $i; $i < $max; $i += $offset) { $ret = adodb_date('m,d,Y,H,i,s',$i); $arr = explode(',',$ret); if ($lastyear != $arr[2]) { $lastyear = $arr[2]; print " $lastyear "; flush(); } $newi = adodb_mktime($arr[3],$arr[4],$arr[5],$arr[0],$arr[1],$arr[2]); if ($i != $newi) { print "Error at $i, adodb_mktime returned $newi ($ret)"; $fail = true; break; } } if (!$fail) print "<p>Passed !</p>"; else print "<p><b>Failed</b> :-(</p>"; }  function adodb_dow($year, $month, $day) {  if ($year <= 1582) { if ($year < 1582 || ($year == 1582 && ($month < 10 || ($month == 10 && $day < 15)))) $greg_correction = 3; else $greg_correction = 0; } else $greg_correction = 0; if($month > 2) $month -= 2; else { $month += 10; $year--; } $day = ( floor((13 * $month - 1) / 5) + $day + ($year % 100) + floor(($year % 100) / 4) + floor(($year / 100) / 4) - 2 * floor($year / 100) + 77); return (($day - 7 * floor($day / 7))) + $greg_correction; }  function _adodb_is_leap_year($year) { if ($year % 4 != 0) return false; if ($year % 400 == 0) { return true;  } else if ($year > 1582 && $year % 100 == 0 ) { return false; } return true; }  function adodb_is_leap_year($year) { return _adodb_is_leap_year(adodb_year_digit_check($year)); }  function adodb_year_digit_check($y) { if ($y < 100) { $yr = (integer) date("Y"); $century = (integer) ($yr /100); if ($yr%100 > 50) { $c1 = $century + 1; $c0 = $century; } else { $c1 = $century; $c0 = $century - 1; } $c1 *= 100;   if (($y + $c1) < $yr+30) $y = $y + $c1; else $y = $y + $c0*100; } return $y; }  function adodb_get_gmt_different() { static $DIFF; if (isset($DIFF)) return $DIFF; $DIFF = mktime(0,0,0,1,2,1970) - gmmktime(0,0,0,1,2,1970); return $DIFF; }  function adodb_getdate($d=false,$fast=false) { if ($d === false) return getdate(); if (!defined('ADODB_TEST_DATES')) { if ((abs($d) <= 0x7FFFFFFF)) {  if (!defined('ADODB_NO_NEGATIVE_TS') || $d >= 0)  return @getdate($d); } } return _adodb_getdate($d); }  function _adodb_getdate($origd=false,$fast=false,$is_gmt=false) { $d = $origd - ($is_gmt ? 0 : adodb_get_gmt_different()); $_day_power = 86400; $_hour_power = 3600; $_min_power = 60; if ($d < -12219321600) $d -= 86400*10;  $_month_table_normal = array("",31,28,31,30,31,30,31,31,30,31,30,31); $_month_table_leaf = array("",31,29,31,30,31,30,31,31,30,31,30,31); if ($d < 0) { $origd = $d;   for ($a = 1970 ; --$a >= 0;) { $lastd = $d; if ($leaf = _adodb_is_leap_year($a)) { $d += $_day_power * 366; } else $d += $_day_power * 365; if ($d >= 0) { $year = $a; break; } } $secsInYear = 86400 * ($leaf ? 366 : 365) + $lastd; $d = $lastd; $mtab = ($leaf) ? $_month_table_leaf : $_month_table_normal; for ($a = 13 ; --$a > 0;) { $lastd = $d; $d += $mtab[$a] * $_day_power; if ($d >= 0) { $month = $a; $ndays = $mtab[$a]; break; } } $d = $lastd; $day = $ndays + ceil(($d+1) / ($_day_power)); $d += ($ndays - $day+1)* $_day_power; $hour = floor($d/$_hour_power); } else { for ($a = 1970 ;; $a++) { $lastd = $d; if ($leaf = _adodb_is_leap_year($a)) { $d -= $_day_power * 366; } else $d -= $_day_power * 365; if ($d <= 0) { $year = $a; break; } } $secsInYear = $lastd; $d = $lastd; $mtab = ($leaf) ? $_month_table_leaf : $_month_table_normal; for ($a = 1 ; $a <= 12; $a++) { $lastd = $d; $d -= $mtab[$a] * $_day_power; if ($d <= 0) { $month = $a; $ndays = $mtab[$a]; break; } } $d = $lastd; $day = ceil(($d+1) / $_day_power); $d = $d - ($day-1) * $_day_power; $hour = floor($d /$_hour_power); } $d -= $hour * $_hour_power; $min = floor($d/$_min_power); $secs = $d - $min * $_min_power; if ($fast) { return array( 'seconds' => $secs, 'minutes' => $min, 'hours' => $hour, 'mday' => $day, 'mon' => $month, 'year' => $year, 'yday' => floor($secsInYear/$_day_power), 'leap' => $leaf, 'ndays' => $ndays ); } $dow = adodb_dow($year,$month,$day); return array( 'seconds' => $secs, 'minutes' => $min, 'hours' => $hour, 'mday' => $day, 'wday' => $dow, 'mon' => $month, 'year' => $year, 'yday' => floor($secsInYear/$_day_power), 'weekday' => gmdate('l',$_day_power*(3+$dow)), 'month' => gmdate('F',mktime(0,0,0,$month,2,1971)), 0 => $origd ); } function adodb_gmdate($fmt,$d=false) { return adodb_date($fmt,$d,true); }  function adodb_date($fmt,$d=false,$is_gmt=false) { if ($d === false) return date($fmt); if (!defined('ADODB_TEST_DATES')) { if ((abs($d) <= 0x7FFFFFFF)) {  if (!defined('ADODB_NO_NEGATIVE_TS') || $d >= 0)  return @date($fmt,$d); } } $_day_power = 86400; $arr = _adodb_getdate($d,true,$is_gmt); $year = $arr['year']; $month = $arr['mon']; $day = $arr['mday']; $hour = $arr['hours']; $min = $arr['minutes']; $secs = $arr['seconds']; $max = strlen($fmt); $dates = '';  for ($i=0; $i < $max; $i++) { switch($fmt[$i]) { case 'T': $dates .= date('T',100000);break;  case 'L': $dates .= $arr['leap'] ? '1' : '0'; break; case 'r':  $dates .= gmdate('D',$_day_power*(3+adodb_dow($year,$month,$day))).', ' . ($day<10?' '.$day:$day) . ' '.date('M',mktime(0,0,0,$month,2,1971)).' '.$year.' '; if ($hour < 10) $dates .= '0'.$hour; else $dates .= $hour; if ($min < 10) $dates .= ':0'.$min; else $dates .= ':'.$min; if ($secs < 10) $dates .= ':0'.$secs; else $dates .= ':'.$secs; $gmt = adodb_get_gmt_different(); $dates .= sprintf(' %s%04d',($gmt<0)?'+':'-',abs($gmt)/36); break; case 'Y': $dates .= $year; break; case 'y': $dates .= substr($year,strlen($year)-2,2); break;  case 'm': if ($month<10) $dates .= '0'.$month; else $dates .= $month; break; case 'n': $dates .= $month; break; case 'M': $dates .= date('M',mktime(0,0,0,$month,2,1971)); break; case 'F': $dates .= date('F',mktime(0,0,0,$month,2,1971)); break;  case 't': $dates .= $arr['ndays']; break; case 'z': $dates .= $arr['yday']; break; case 'w': $dates .= adodb_dow($year,$month,$day); break; case 'l': $dates .= gmdate('l',$_day_power*(3+adodb_dow($year,$month,$day))); break; case 'D': $dates .= gmdate('D',$_day_power*(3+adodb_dow($year,$month,$day))); break; case 'j': $dates .= $day; break; case 'd': if ($day<10) $dates .= '0'.$day; else $dates .= $day; break; case 'S': $d10 = $day % 10; if ($d10 == 1) $dates .= 'st'; else if ($d10 == 2) $dates .= 'nd'; else if ($d10 == 3) $dates .= 'rd'; else $dates .= 'th'; break;  case 'Z': $dates .= ($is_gmt) ? 0 : -adodb_get_gmt_different(); break; case 'O': $gmt = ($is_gmt) ? 0 : adodb_get_gmt_different(); $dates .= sprintf('%s%04d',($gmt<0)?'+':'-',abs($gmt)/36); break; case 'H': if ($hour < 10) $dates .= '0'.$hour; else $dates .= $hour; break; case 'h': if ($hour > 12) $hh = $hour - 12; else { if ($hour == 0) $hh = '12'; else $hh = $hour; } if ($hh < 10) $dates .= '0'.$hh; else $dates .= $hh; break; case 'G': $dates .= $hour; break; case 'g': if ($hour > 12) $hh = $hour - 12; else { if ($hour == 0) $hh = '12'; else $hh = $hour; } $dates .= $hh; break;  case 'i': if ($min < 10) $dates .= '0'.$min; else $dates .= $min; break;  case 'U': $dates .= $d; break; case 's': if ($secs < 10) $dates .= '0'.$secs; else $dates .= $secs; break;   case 'a': if ($hour>=12) $dates .= 'pm'; else $dates .= 'am'; break; case 'A': if ($hour>=12) $dates .= 'PM'; else $dates .= 'AM'; break; default: $dates .= $fmt[$i]; break;  case "\\": $i++; if ($i < $max) $dates .= $fmt[$i]; break; } } return $dates; }  function adodb_gmmktime($hr,$min,$sec,$mon,$day,$year,$is_dst=false) { return adodb_mktime($hr,$min,$sec,$mon,$day,$year,$is_dst,true); }  function adodb_mktime($hr,$min,$sec,$mon,$day,$year,$is_dst=false,$is_gmt=false) { if (!defined('ADODB_TEST_DATES')) {   if (!defined('ADODB_NO_NEGATIVE_TS') || ($year >= 1971)) if (1901 < $year && $year < 2038) return @mktime($hr,$min,$sec,$mon,$day,$year); } $gmt_different = ($is_gmt) ? 0 : adodb_get_gmt_different(); $hr = intval($hr); $min = intval($min); $sec = intval($sec); $mon = intval($mon); $day = intval($day); $year = intval($year); $year = adodb_year_digit_check($year); if ($mon > 12) { $y = floor($mon / 12); $year += $y; $mon -= $y*12; } $_day_power = 86400; $_hour_power = 3600; $_min_power = 60; $_month_table_normal = array("",31,28,31,30,31,30,31,31,30,31,30,31); $_month_table_leaf = array("",31,29,31,30,31,30,31,31,30,31,30,31); $_total_date = 0; if ($year >= 1970) { for ($a = 1970 ; $a <= $year; $a++) { $leaf = _adodb_is_leap_year($a); if ($leaf == true) { $loop_table = $_month_table_leaf; $_add_date = 366; } else { $loop_table = $_month_table_normal; $_add_date = 365; } if ($a < $year) { $_total_date += $_add_date; } else { for($b=1;$b<$mon;$b++) { $_total_date += $loop_table[$b]; } } } $_total_date +=$day-1; $ret = $_total_date * $_day_power + $hr * $_hour_power + $min * $_min_power + $sec + $gmt_different; } else { for ($a = 1969 ; $a >= $year; $a--) { $leaf = _adodb_is_leap_year($a); if ($leaf == true) { $loop_table = $_month_table_leaf; $_add_date = 366; } else { $loop_table = $_month_table_normal; $_add_date = 365; } if ($a > $year) { $_total_date += $_add_date; } else { for($b=12;$b>$mon;$b--) { $_total_date += $loop_table[$b]; } } } $_total_date += $loop_table[$mon] - $day; $_day_time = $hr * $_hour_power + $min * $_min_power + $sec; $_day_time = $_day_power - $_day_time; $ret = -( $_total_date * $_day_power + $_day_time - $gmt_different); if ($ret < -12220185600) $ret += 10*86400;  else if ($ret < -12219321600) $ret = -12219321600;  }  return $ret; }     class ADORecordSet {  var $dataProvider = "native"; var $fields = false;  var $blobSize = 64;   var $canSeek = false;  var $sql;  var $EOF = false;  var $emptyTimeStamp = '&nbsp;';  var $emptyDate = '&nbsp;';  var $debug = false; var $timeCreated=0;  var $bind = false;  var $fetchMode;  var $connection = false;   var $_numOfRows = -1;  var $_numOfFields = -1;  var $_queryID = -1;  var $_currentRow = -1;  var $_closed = false;  var $_inited = false;  var $_obj;  var $_names;  var $_currentPage = -1;  var $_atFirstPage = false;  var $_atLastPage = false;  var $_lastPageNo = -1; var $_maxRecordCount = 0; var $dateHasTime = false;  function ADORecordSet($queryID) { $this->_queryID = $queryID; } function Init() { if ($this->_inited) return; $this->_inited = true; if ($this->_queryID) @$this->_initrs(); else { $this->_numOfRows = 0; $this->_numOfFields = 0; } if ($this->_numOfRows != 0 && $this->_numOfFields && $this->_currentRow == -1) { $this->_currentRow = 0; if ($this->EOF = ($this->_fetch() === false)) { $this->_numOfRows = 0;  } } else { $this->EOF = true; } }  function GetArray($nRows = -1) { global $ADODB_EXTENSION; if ($ADODB_EXTENSION) return adodb_getall($this,$nRows); $results = array(); $cnt = 0; while (!$this->EOF && $nRows != $cnt) { $results[] = $this->fields; $this->MoveNext(); $cnt++; } return $results; }  function NextRecordSet() { return false; }  function GetArrayLimit($nrows,$offset=-1) { if ($offset <= 0) { return $this->GetArray($nrows); } $this->Move($offset); $results = array(); $cnt = 0; while (!$this->EOF && $nrows != $cnt) { $results[$cnt++] = $this->fields; $this->MoveNext(); } return $results; }  function GetRows($nRows = -1) { return $this->GetArray($nRows); }  function UserTimeStamp($v,$fmt='Y-m-d H:i:s') { $tt = $this->UnixTimeStamp($v);  if (($tt === false || $tt == -1) && $v != false) return $v; if ($tt == 0) return $this->emptyTimeStamp; return adodb_date($fmt,$tt); }  function UserDate($v,$fmt='Y-m-d') { $tt = $this->UnixDate($v);  if (($tt === false || $tt == -1) && $v != false) return $v; else if ($tt == 0) return $this->emptyDate; else if ($tt == -1) {  } return adodb_date($fmt,$tt); }  function UnixDate($v) { if (!preg_match( "|^([0-9]{4})[-/\.]?([0-9]{1,2})[-/\.]?([0-9]{1,2})|", ($v), $rr)) return false; if ($rr[1] <= 1903) return 0;  return @adodb_mktime(0,0,0,$rr[2],$rr[3],$rr[1]); }  function UnixTimeStamp($v) { if (!preg_match( "|^([0-9]{4})[-/\.]?([0-9]{1,2})[-/\.]?([0-9]{1,2})[ -]?(([0-9]{1,2}):?([0-9]{1,2}):?([0-9\.]{1,4}))?|", ($v), $rr)) return false; if ($rr[1] <= 1903 && $rr[2]<= 1) return 0;  if (!isset($rr[5])) return adodb_mktime(0,0,0,$rr[2],$rr[3],$rr[1]); return @adodb_mktime($rr[5],$rr[6],$rr[7],$rr[2],$rr[3],$rr[1]); }  function Free() { return $this->Close(); }  function NumRows() { return $this->_numOfRows; }  function NumCols() { return $this->_numOfFields; }  function FetchRow() { if ($this->EOF) return false; $arr = $this->fields; $this->_currentRow++; if (!$this->_fetch()) $this->EOF = true; return $arr; }  function FetchInto(&$arr) { if ($this->EOF) return (defined('PEAR_ERROR_RETURN')) ? new PEAR_Error('EOF',-1): false; $arr = $this->fields; $this->MoveNext(); return 1;  }  function MoveFirst() { if ($this->_currentRow == 0) return true; return $this->Move(0); }  function MoveNext() { if (!$this->EOF) { $this->_currentRow++; if ($this->_fetch()) return true; } $this->EOF = true;  return false; }  function Move($rowNumber = 0) { $this->EOF = false; if ($rowNumber == $this->_currentRow) return true; if ($rowNumber >= $this->_numOfRows) if ($this->_numOfRows != -1) $rowNumber = $this->_numOfRows-2; if ($this->canSeek) { if ($this->_seek($rowNumber)) { $this->_currentRow = $rowNumber; if ($this->_fetch()) { return true; } } else { $this->EOF = true; return false; } } else { if ($rowNumber < $this->_currentRow) return false; global $ADODB_EXTENSION; if ($ADODB_EXTENSION) { while (!$this->EOF && $this->_currentRow < $rowNumber) { adodb_movenext($this); } } else { while (! $this->EOF && $this->_currentRow < $rowNumber) { $this->_currentRow++; if (!$this->_fetch()) $this->EOF = true; } } return !($this->EOF); } $this->fields = false; $this->EOF = true; return false; }  function Fields($colname) { return $this->fields[$colname]; }  function GetRowAssoc($upper=1) { if (!$this->bind) { $this->bind = array(); for ($i=0; $i < $this->_numOfFields; $i++) { $o = $this->FetchField($i); if ($upper === 2) $this->bind[$o->name] = $i; else $this->bind[($upper) ? strtoupper($o->name) : strtolower($o->name)] = $i; } } $record = array(); foreach($this->bind as $k => $v) { $record[$k] = $this->fields[$v]; } return $record; }  function Close() {    if (!$this->_closed) { $this->_closed = true; return $this->_close(); } else return true; }  function RecordCount() {return $this->_numOfRows;}  function MaxRecordCount() { return ($this->_maxRecordCount) ? $this->_maxRecordCount : $this->RecordCount(); }  function RowCount() {return $this->_numOfRows;}  function CurrentRow() {return $this->_currentRow;}  function AbsolutePosition() {return $this->_currentRow;}  function FieldCount() {return $this->_numOfFields;}  function &FetchField($fieldoffset) {  }  function FieldTypesArray() { $arr = array(); for ($i=0, $max=$this->_numOfFields; $i < $max; $i++) $arr[] = $this->FetchField($i); return $arr; } function _close() {} }      class ADORecordSet_array extends ADORecordSet { var $databaseType = 'array'; var $_array;  var $_types;  var $_colnames;  var $_skiprow1;  var $_fieldarr;  var $canSeek = true; var $affectedrows = false; var $insertid = false; var $sql = ''; var $compat = false;  function ADORecordSet_array($fakeid=1) { global $ADODB_FETCH_MODE,$ADODB_COMPAT_FETCH;  $this->compat = !empty($ADODB_COMPAT_FETCH); $this->ADORecordSet($fakeid);  $this->fetchMode = $ADODB_FETCH_MODE; }  function InitArrayFields($array,$fieldarr) { $this->_array = $array; $this->_skiprow1= false; if ($fieldarr) { $this->_fieldobjects = $fieldarr; } $this->Init(); } function GetArray($nRows=-1) { if ($nRows == -1 && $this->_currentRow <= 0 && !$this->_skiprow1) { return $this->_array; } else { return ADORecordSet::GetArray($nRows); } } function _initrs() { $this->_numOfRows = sizeof($this->_array); if ($this->_skiprow1) $this->_numOfRows -= 1; $this->_numOfFields =(isset($this->_fieldobjects)) ? sizeof($this->_fieldobjects):sizeof($this->_types); }  function Fields($colname) { if ($this->fetchMode & ADODB_FETCH_ASSOC) return $this->fields[$colname]; if (!$this->bind) { $this->bind = array(); for ($i=0; $i < $this->_numOfFields; $i++) { $o = $this->FetchField($i); $this->bind[strtoupper($o->name)] = $i; } } return $this->fields[$this->bind[strtoupper($colname)]]; } function &FetchField($fieldOffset = -1) { if (isset($this->_fieldobjects)) { return $this->_fieldobjects[$fieldOffset]; } $o = new ADOFieldObject(); $o->name = $this->_colnames[$fieldOffset]; $o->type = $this->_types[$fieldOffset]; $o->max_length = -1;  return $o; } function _seek($row) { if (sizeof($this->_array) && $row < $this->_numOfRows) { $this->fields = $this->_array[$row]; return true; } return false; } function MoveNext() { if (!$this->EOF) { $this->_currentRow++; $pos = $this->_currentRow; if ($this->_skiprow1) $pos += 1; if ($this->_numOfRows <= $pos) { if (!$this->compat) $this->fields = false; } else { $this->fields = $this->_array[$pos]; return true; } $this->EOF = true; } return false; } function _fetch() { $pos = $this->_currentRow; if ($this->_skiprow1) $pos += 1; if ($this->_numOfRows <= $pos) { if (!$this->compat) $this->fields = false; return false; } $this->fields = $this->_array[$pos]; return true; } function _close() { return true; } }      function ADOLoadDB($dbType) { return ADOLoadCode($dbType); }  function ADOLoadCode($dbType) { GLOBAL $ADODB_Database; if (!$dbType) return false; $ADODB_Database = strtolower($dbType); switch ($ADODB_Database) { case 'maxsql': $ADODB_Database = 'mysqlt'; break; case 'postgres': case 'pgsql': $ADODB_Database = 'postgres7'; break; }  if (! defined("_ADODB_MYSQL_LAYER")) { define("_ADODB_MYSQL_LAYER", 1 ); class ADODB_mysql extends ADOConnection { var $databaseType = 'mysql'; var $dataProvider = 'mysql'; var $hasInsertID = true; var $hasAffectedRows = true; var $metaTablesSQL = "SHOW TABLES"; var $metaColumnsSQL = "SHOW COLUMNS FROM %s"; var $fmtTimeStamp = "'Y-m-d H:i:s'"; var $hasLimit = true; var $hasMoveFirst = true; var $hasGenID = true; var $upperCase = 'upper'; var $isoDates = true;  var $sysDate = 'CURDATE()'; var $sysTimeStamp = 'NOW()'; var $hasTransactions = false; var $forceNewConnect = false; var $poorAffectedRows = true; var $clientFlags = 0; var $dbxDriver = 1; function ADODB_mysql() { } function ServerInfo() { $arr['description'] = $this->GetOne("select version()"); $arr['version'] = ADOConnection::_findvers($arr['description']); return $arr; }  function qstr($s,$magic_quotes=false) { if (!$magic_quotes) { if (ADODB_PHPVER >= 0x4300) { if (is_resource($this->_connectionID)) return "'".mysql_real_escape_string($s,$this->_connectionID)."'"; else return "'".mysql_real_escape_string($s)."'"; } if ($this->replaceQuote[0] == '\\'){ $s = adodb_str_replace(array('\\',"\0"),array('\\\\',"\\\0"),$s); } return "'".str_replace("'",$this->replaceQuote,$s)."'"; }  $s = str_replace('\\"','"',$s); return "'$s'"; } function _insertid() { return mysql_insert_id($this->_connectionID); } function _affectedrows() { return mysql_affected_rows($this->_connectionID); }   var $_genIDSQL = "update %s set id=LAST_INSERT_ID(id+1);"; var $_genSeqSQL = "create table %s (id int not null)"; var $_genSeq2SQL = "insert into %s values (%s)"; var $_dropSeqSQL = "drop table %s"; function GenID($seqname='adodbseq',$startID=1) {  if (!$this->hasGenID) return false; $getnext = sprintf($this->_genIDSQL,$seqname); $rs = @$this->Execute($getnext); if (!$rs) { $u = strtoupper($seqname); $this->Execute(sprintf($this->_genSeqSQL,$seqname)); $this->Execute(sprintf($this->_genSeq2SQL,$seqname,$startID-1)); $rs = $this->Execute($getnext); } $this->genID = mysql_insert_id($this->_connectionID); if ($rs) $rs->Close(); return $this->genID; } function &MetaDatabases() { $qid = mysql_list_dbs($this->_connectionID); $arr = array(); $i = 0; $max = mysql_num_rows($qid); while ($i < $max) { $arr[] = mysql_tablename($qid,$i); $i += 1; } return $arr; }  function SQLDate($fmt, $col=false) { if (!$col) $col = $this->sysDate; $s = 'DATE_FORMAT('.$col.",'"; $concat = false; $len = strlen($fmt); for ($i=0; $i < $len; $i++) { $ch = $fmt[$i]; switch($ch) { case 'Y': case 'y': $s .= '%Y'; break; case 'Q': case 'q': $s .= "'),Quarter($col)"; if ($len > $i+1) $s .= ",DATE_FORMAT($col,'"; else $s .= ",('"; $concat = true; break; case 'M': case 'm': $s .= '%m'; break; case 'D': case 'd': $s .= '%d'; break; default: if ($ch == '\\') { $i++; $ch = substr($fmt,$i,1); } $s .= $ch; break; } } $s.="')"; if ($concat) $s = "CONCAT($s)"; return $s; }   function Concat() { $s = ""; $arr = func_get_args(); $first = true;   $s = implode(',',$arr); if (strlen($s) > 0) return "CONCAT($s)"; else return ''; } function OffsetDate($dayFraction,$date=false) { if (!$date) $date = $this->sysDate; return "from_unixtime(unix_timestamp($date)+($dayFraction)*24*3600)"; }  function _connect($argHostname, $argUsername, $argPassword, $argDatabasename) { if (ADODB_PHPVER >= 0x4300) $this->_connectionID = mysql_connect($argHostname,$argUsername,$argPassword, $this->forceNewConnect,$this->clientFlags); else if (ADODB_PHPVER >= 0x4200) $this->_connectionID = mysql_connect($argHostname,$argUsername,$argPassword, $this->forceNewConnect); else $this->_connectionID = mysql_connect($argHostname,$argUsername,$argPassword); if ($this->_connectionID === false) return false; if ($argDatabasename) return $this->SelectDB($argDatabasename); return true; }  function _pconnect($argHostname, $argUsername, $argPassword, $argDatabasename) { if (ADODB_PHPVER >= 0x4300) $this->_connectionID = mysql_pconnect($argHostname,$argUsername,$argPassword,$this->clientFlags); else $this->_connectionID = mysql_pconnect($argHostname,$argUsername,$argPassword); if ($this->_connectionID === false) return false; if ($this->autoRollback) $this->RollbackTrans(); if ($argDatabasename) return $this->SelectDB($argDatabasename); return true; } function _nconnect($argHostname, $argUsername, $argPassword, $argDatabasename) { $this->forceNewConnect = true; $this->_connect($argHostname, $argUsername, $argPassword, $argDatabasename); }  function SelectDB($dbName) { $this->databaseName = $dbName; if ($this->_connectionID) { return @mysql_select_db($dbName,$this->_connectionID); } else return false; }  function &SelectLimit($sql,$nrows=-1,$offset=-1,$inputarr=false, $arg3=false,$secs=0) { $offsetStr =($offset>=0) ? "$offset," : ''; return ($secs) ? $this->CacheExecute($secs,$sql." LIMIT $offsetStr$nrows",$inputarr,$arg3) : $this->Execute($sql." LIMIT $offsetStr$nrows",$inputarr,$arg3); }  function _query($sql,$inputarr) {   return mysql_query($sql,$this->_connectionID);  }  function ErrorMsg() { if (empty($this->_connectionID)) $this->_errorMsg = @mysql_error(); else $this->_errorMsg = @mysql_error($this->_connectionID); return $this->_errorMsg; }  function ErrorNo() { if (empty($this->_connectionID)) return @mysql_errno(); else return @mysql_errno($this->_connectionID); }  function _close() { @mysql_close($this->_connectionID); $this->_connectionID = false; }  function CharMax() { return 255; }  function TextMax() { return 4294967295; } }  class ADORecordSet_mysql extends ADORecordSet{ var $databaseType = "mysql"; var $canSeek = true; function ADORecordSet_mysql($queryID,$mode=false) { if ($mode === false) { global $ADODB_FETCH_MODE; $mode = $ADODB_FETCH_MODE; } switch ($mode) { case ADODB_FETCH_NUM: $this->fetchMode = MYSQL_NUM; break; case ADODB_FETCH_ASSOC:$this->fetchMode = MYSQL_ASSOC; break; default: case ADODB_FETCH_DEFAULT: case ADODB_FETCH_BOTH:$this->fetchMode = MYSQL_BOTH; break; } $this->ADORecordSet($queryID); } function _initrs() {   $this->_numOfRows = @mysql_num_rows($this->_queryID); $this->_numOfFields = @mysql_num_fields($this->_queryID); } function &FetchField($fieldOffset = -1) { if ($fieldOffset != -1) { $o = @mysql_fetch_field($this->_queryID, $fieldOffset); $f = @mysql_field_flags($this->_queryID,$fieldOffset); $o->max_length = @mysql_field_len($this->_queryID,$fieldOffset);   $o->binary = (strpos($f,'binary')!== false); } else if ($fieldOffset == -1) {  $o = @mysql_fetch_field($this->_queryID); $o->max_length = @mysql_field_len($this->_queryID);   } return $o; } function &GetRowAssoc($upper=true) { if ($this->fetchMode == MYSQL_ASSOC && !$upper) return $rs->fields; return ADORecordSet::GetRowAssoc($upper); }  function Fields($colname) {  if ($this->fetchMode != MYSQL_NUM) return @$this->fields[$colname]; if (!$this->bind) { $this->bind = array(); for ($i=0; $i < $this->_numOfFields; $i++) { $o = $this->FetchField($i); $this->bind[strtoupper($o->name)] = $i; } } return $this->fields[$this->bind[strtoupper($colname)]]; } function _seek($row) { if ($this->_numOfRows == 0) return false; return @mysql_data_seek($this->_queryID,$row); }  function MoveNext() {  if (!$this->EOF) { $this->_currentRow++;  $this->fields = @mysql_fetch_array($this->_queryID,$this->fetchMode); if (is_array($this->fields)) return true; $this->EOF = true; }  return false; } function _fetch() { $this->fields = @mysql_fetch_array($this->_queryID,$this->fetchMode); return is_array($this->fields); } function _close() { @mysql_free_result($this->_queryID); $this->_queryID = false; } } } }  function &NewADOConnection($db='') { return ADONewConnection($db); }  function &ADONewConnection($db='') { GLOBAL $ADODB_Database; $rez = true; if ($db) { if ($ADODB_Database != $db) ADOLoadCode($db); } else { if (!empty($ADODB_Database)) { ADOLoadCode($ADODB_Database); } else { $rez = false; } } $errorfn = (defined('ADODB_ERROR_HANDLER')) ? ADODB_ERROR_HANDLER : false; if (!$rez) { if ($errorfn) {  $errorfn('ADONewConnection', 'ADONewConnection', -998, "could not load the database driver for '$db", $dbtype); } else ADOConnection::outp( "<p>ADONewConnection: Unable to load database driver '$db'</p>",false); return false; } $cls = 'ADODB_'.$ADODB_Database; $obj = new $cls(); if ($errorfn) { $obj->raiseErrorFn = $errorfn; } return $obj; }  function adodb_write_file($filename, $contents,$debug=false) {            if (strpos(strtoupper(PHP_OS),'WIN') !== false) {  $mtime = substr(str_replace(' ','_',microtime()),2);  @unlink($filename);  $tmpname = $filename.uniqid($mtime).getmypid(); if (!($fd = fopen($tmpname,'a'))) return false; $ok = ftruncate($fd,0); if (!fwrite($fd,$contents)) $ok = false; fclose($fd); chmod($tmpname,0644); if (!@rename($tmpname,$filename)) { unlink($tmpname); $ok = false; } if (!$ok) { if ($debug) ADOConnection::outp( " Rename $tmpname ".($ok? 'ok' : 'failed')); } return $ok; } if (!($fd = fopen($filename, 'a'))) return false; if (flock($fd, LOCK_EX) && ftruncate($fd, 0)) { $ok = fwrite( $fd, $contents ); fclose($fd); chmod($filename,0644); }else { fclose($fd); if ($debug)ADOConnection::outp( " Failed acquiring lock for $filename<br>\n"); $ok = false; } return $ok; } } ?>